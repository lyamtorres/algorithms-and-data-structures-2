EXERCICE 2

Question 1 :

procédure creer(Consigne m cons, ListeCasier liste, entier n)
Précondition : n >= 1
Sortie : cons contient n casiers libres

fonction estPleine(Consigne cons): booléen
Précondition: Aucune
Sortie: 1 si tabCasiers est plein et 0 sinon


procédure deposerBagage(Consigne m cons, Bagage d bag, entier d i)
Précondition : Le casier i doit être disponible
Sortie : Aucune

fonction retirerBagage(Consigne m cons, entier d i): entier
Précondition: |tabCasiers| > 0 
Sortie: Aucune

Question 2 :

type Casier = enregistrement 
	entier: numero
	booléen: libre
	Bagage: bagage
	entier: nbFoisUtilise // NOUVEAU CHANGEMENT
fin

Question 3 :

Type CasierLibre = enregistrement
	pointeur vers Casier: casier, suivant
fin

Type ListeCasier = enregistrement
	pointeur vers CasierLibre: tete, queue // NOUVEAU CHANGEMENT
fin

type Consigne = enregistrement 
	Tableau(Casier): tab
	entier: nbCases
	entier: nbDisponibles
	ListeCasiers: liste
fin

Question 4:

Complexité = ?

procédure creerConsigne(Consigne m cons, ListeCasier liste, entier n)
variables
	entier: i
	pointeur vers MaillonCasier: actuel

debut
	allouer cons.tab[1:n]
	cons.nombreCases <- n
	cons.casesDisponibles <- n
	
	pour i de 1 à n faire
		cons.tab[i].numero <- i
		cons.tab[i].libre <- vrai
		cons.tab[i].nbFoisUtilise <- 0 // NOUVEAU CHANGEMENT
	fin pour

	allouer(liste.tete)
	memoire(liste.tete).casier <- @cons.tab[1]
	memoire(liste.tete).suivant <- null

	i <- 2
	actuel <- liste.tete
	tant que (i < n) faire
		allocation(memoire(actuel).suivant)
		actuel <- memoire(actuel).suivant
		memoire(actuel).casier <- @tab[i]
		i <- i + 1
	fin tant que	

fin


// 0(1) temps
fonction estPleine(Consigne d cons, entier d i) : booléen
debut
	si (cons.casesDisponibles = 0) alors
		retourner vrai
	sinon
		retourner faux	
	fin si
fin


// 0(1) temps
fonction deposer(Consigne m cons, bagage d bag, ListeCasier m liste): entier
variables
	entier: numCasier

debut
	mémoire(mémoire(liste.tete).casier).bagage <- bag
	mémoire(mémoire(liste.tete).casier).libre <- faux
	mémoire(mémoire(liste.tete).casier).nbFoisUtilise <- mémoire(mémoire(liste.tete).casier).nbFoisUtilise + 1 // NOUVEAU CHANGEMENT
	numCasier <- mémoire(mémoire(liste.tete).case).numero
	cons.nbDisponibles <- cons.nbDisponibles - 1
	mémoire(liste.queue).suivant <- memoire(liste.tete) // NOUVEAU CHANGEMENT
	liste.queue <- memoire(liste.tete) // NOUVEAU CHANGEMENT
	liste.tete <- mémoire(liste.tete).suivant
	retourner numCasier

fin


// 0(1) temps
procedure retirerBagage(Consigne m cons, entier d i)
debut
	b <- cons.tab[i].bag
	cons.tab[i].libre <- vrai
	cons.casesDisponibles <- cons.casesDisponibles + 1
fin

	
	
